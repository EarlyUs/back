plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.earlyus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar{
	enabled = false
}

jacoco {
	toolVersion = "0.8.8"
	// reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = false
		html.required = true
		csv.required = false
	}

	finalizedBy 'jacocoTestCoverageVerification'

	// 결과 리포트에서 제외할 클래스들
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/XXXApplication.class'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}